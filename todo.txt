13:42 - Python1320: we could have something similar (to ulx)
require'admen'
local cmd = admen.newcmd "kill"
cmd:addgroups{"killer","moderator"} -- developer -> superadmin -> admin -> moderator, players could also be given "killer" group or a new group "metastruct most valuable person" group could contain the killer group
function cmd:callback( pl , x)
 if not pl then pl=self.Player
 for i=1,x do pl:Kill()  end
end
cmd:addparam "player" :optional(true)
cmd:addparam "number":optional(true):min(1):max(10)
13:43 - Python1320: cmd:addparam() if you want bare bones handling
13:43 - Python1320: we could have parameter filters like the number and player
13:44 - Python1320: 80% of commands want a target player so it's easier to keep it out of the common commands
13:44 - Python1320: kind of like preprocessor
13:44 - MetaMan: explain these filters
13:50 - Python1320: admen.addparamtype("player",function(param,in)
  local opt=params.optional
  local pl = tonumber(in) 
  pl = pl and Entity(pl) 
  pl = pl and pl:IsPlayer() and pl
  if not pl then
    if opt then return true,nil else return false,"invalid player" end
  end

return true,pl 
end)
13:51 - MetaMan: i think i see where you're going
13:52 - MetaMan: when the command is being parsed (whether it comes from chat or console) it applies those preprocessors (paramtypes) to check (or obtain the required data like the entities?)
13:53 - Python1320: it transforms the bare string to whatever you want
13:53 - Python1320: or nil
13:53 - Python1320: it could transform it to a table with the processed and raw value even
13:53 - Python1320: and any filter can abort processing a command depending on whether we want required/optional by default
13:54 - MetaMan: how could you abort the process? throwing an error for example (pcall the preprocessors maybe)?
13:54 - Python1320: I'm also going to the help part where autocomplete could become viable
13:54 - Python1320: in the above example I returned false
13:54 - Python1320: false and reason
13:55 - MetaMan: i was thinking along exceptions but i guess that works too
13:55 - Python1320: error could work better
13:55 - Python1320: but the convention is to    return nil,"error"
13:55 - MetaMan: yes
13:55 - Python1320: if there's an actual error
13:56 - Python1320: you could just do something like "internal error"
13:56 - Python1320: instead of exposing potentially revealing data
13:56 - Python1320: cmd:addparam "number":optional(true):min(1):max(10) allows the filter to do pretty much anything
13:57 - Python1320: that would just construct a table {optional=true,min=1,max=10}
13:58 - Python1320: I'm tired of writing easylua.FindEntity
13:58 - MetaMan: and how would this fix that
13:59 - Python1320: I can just copypaste 
cmd:addparam "player" :optional( true ):otherreq( false )